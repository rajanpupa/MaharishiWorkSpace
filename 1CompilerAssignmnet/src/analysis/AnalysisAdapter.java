/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseTSlineComment(TSlineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMlineComment(TMlineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLit(TStringLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharLit(TCharLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLit(TIntLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatLit(TFloatLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKplusOperator(TKplusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKminusOperator(TKminusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKmultiplicationOperator(TKmultiplicationOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivisionOperator(TDivisionOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKlessthen(TKlessthen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKlessthenOrEqual(TKlessthenOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKgreaterthen(TKgreaterthen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKgreaterthenOrEqual(TKgreaterthenOrEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKcomparisonOperator(TKcomparisonOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKand(TKand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKor(TKor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKnotOperator(TKnotOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKconditionalColonOperator(TKconditionalColonOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKsemicolon(TKsemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKcomma(TKcomma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKleftBrace(TKleftBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKrightBrace(TKrightBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKleftCurly(TKleftCurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKrightCurly(TKrightCurly node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKleftSquare(TKleftSquare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKrightSquare(TKrightSquare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKnotEqualsComparison(TKnotEqualsComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKequals(TKequals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKarrowOperator(TKarrowOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKbitwiseXorOperator(TKbitwiseXorOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKmoduloDisisonOperator(TKmoduloDisisonOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKdotOperator(TKdotOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKbitwiseAndOperator(TKbitwiseAndOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKbitwiseOrOperator(TKbitwiseOrOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKclass(TKclass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKbool(TKbool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKbreak(TKbreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKchar(TKchar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKcontinue(TKcontinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKdo(TKdo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKelse(TKelse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKfalse(TKfalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKfloat(TKfloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKif(TKif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKint(TKint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKnull(TKnull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKnew(TKnew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKprivate(TKprivate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKprotected(TKprotected node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKpublic(TKpublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKreturn(TKreturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKstatic(TKstatic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKstring(TKstring node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKthis(TKthis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKtrue(TKtrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwhile(TKwhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKvoid(TKvoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKidentifier(TKidentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
