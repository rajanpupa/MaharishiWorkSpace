/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseTSlineComment(TSlineComment node);
    void caseTMlineComment(TMlineComment node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTStringLit(TStringLit node);
    void caseTCharLit(TCharLit node);
    void caseTIntLit(TIntLit node);
    void caseTFloatLit(TFloatLit node);
    void caseTKplusOperator(TKplusOperator node);
    void caseTKminusOperator(TKminusOperator node);
    void caseTKmultiplicationOperator(TKmultiplicationOperator node);
    void caseTDivisionOperator(TDivisionOperator node);
    void caseTKlessthen(TKlessthen node);
    void caseTKlessthenOrEqual(TKlessthenOrEqual node);
    void caseTKgreaterthen(TKgreaterthen node);
    void caseTKgreaterthenOrEqual(TKgreaterthenOrEqual node);
    void caseTKcomparisonOperator(TKcomparisonOperator node);
    void caseTKand(TKand node);
    void caseTKor(TKor node);
    void caseTKnotOperator(TKnotOperator node);
    void caseTKconditionalColonOperator(TKconditionalColonOperator node);
    void caseTKsemicolon(TKsemicolon node);
    void caseTKcomma(TKcomma node);
    void caseTKleftBrace(TKleftBrace node);
    void caseTKrightBrace(TKrightBrace node);
    void caseTKleftCurly(TKleftCurly node);
    void caseTKrightCurly(TKrightCurly node);
    void caseTKleftSquare(TKleftSquare node);
    void caseTKrightSquare(TKrightSquare node);
    void caseTKnotEqualsComparison(TKnotEqualsComparison node);
    void caseTKequals(TKequals node);
    void caseTKarrowOperator(TKarrowOperator node);
    void caseTKbitwiseXorOperator(TKbitwiseXorOperator node);
    void caseTKmoduloDisisonOperator(TKmoduloDisisonOperator node);
    void caseTKdotOperator(TKdotOperator node);
    void caseTKbitwiseAndOperator(TKbitwiseAndOperator node);
    void caseTKbitwiseOrOperator(TKbitwiseOrOperator node);
    void caseTKclass(TKclass node);
    void caseTKbool(TKbool node);
    void caseTKbreak(TKbreak node);
    void caseTKchar(TKchar node);
    void caseTKcontinue(TKcontinue node);
    void caseTKdo(TKdo node);
    void caseTKelse(TKelse node);
    void caseTKfalse(TKfalse node);
    void caseTKfloat(TKfloat node);
    void caseTKif(TKif node);
    void caseTKint(TKint node);
    void caseTKnull(TKnull node);
    void caseTKnew(TKnew node);
    void caseTKprivate(TKprivate node);
    void caseTKprotected(TKprotected node);
    void caseTKpublic(TKpublic node);
    void caseTKreturn(TKreturn node);
    void caseTKstatic(TKstatic node);
    void caseTKstring(TKstring node);
    void caseTKthis(TKthis node);
    void caseTKtrue(TKtrue node);
    void caseTKwhile(TKwhile node);
    void caseTKvoid(TKvoid node);
    void caseTKidentifier(TKidentifier node);
    void caseEOF(EOF node);
}
